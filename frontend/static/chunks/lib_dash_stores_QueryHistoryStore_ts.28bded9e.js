"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkaxiom_local_dash"] = self["webpackChunkaxiom_local_dash"] || []).push([["lib_dash_stores_QueryHistoryStore_ts"],{

/***/ 30413:
/*!*******************************************!*\
  !*** ./lib/dash/stores/LogStreamStore.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LogStreamStore\": () => (/* binding */ LogStreamStore),\n/* harmony export */   \"MarkerType\": () => (/* binding */ MarkerType),\n/* harmony export */   \"StreamingState\": () => (/* binding */ StreamingState),\n/* harmony export */   \"dateToTimestamp36\": () => (/* binding */ dateToTimestamp36),\n/* harmony export */   \"isLog\": () => (/* binding */ isLog),\n/* harmony export */   \"parseQueryMessages\": () => (/* binding */ parseQueryMessages)\n/* harmony export */ });\n/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isEqual */ 47184);\n/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isEqual__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mobx */ 50265);\n/* harmony import */ var moment_timezone__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! moment-timezone */ 47812);\n/* harmony import */ var moment_timezone__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(moment_timezone__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _components_Notification__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/Notification */ 2022);\n/* harmony import */ var _shared_dash__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../shared/dash */ 81002);\n/* harmony import */ var _util_dates__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/dates */ 38478);\n/* harmony import */ var _util_numbers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/numbers */ 64684);\n/* harmony import */ var _DatasetStore__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./DatasetStore */ 33998);\n/* harmony import */ var _ElementsDatasetStore__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ElementsDatasetStore */ 92446);\n/* harmony import */ var _StoreBase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StoreBase */ 53769);\n/* harmony import */ var _UserProfileStore__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./UserProfileStore */ 99193);\n/* harmony import */ var _ViewStore__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ViewStore */ 77776);\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// cSpell:ignore dedup imurmurhash MurmurHash3 containerd nocache ntpd syslog systemd udevd vfield\n\n\n\n\n\n\n\n\n\n\n\n\nconst DEFAULT_LOGS_REFRESH_RATE = 1000;\nconst E2E_TESTING = \"false\" === 'true';\nconst MAX_NUM_LOGS = 500;\nconst LOGS_PER_PAGE = 100;\nconst TOAST_ID = 'getLogs';\nconst LOGS_REFRESH_RATE = Number(undefined) || DEFAULT_LOGS_REFRESH_RATE;\nvar MarkerType;\n(function (MarkerType) {\n    MarkerType[\"DateRangeStart\"] = \"dateRangeStart\";\n    MarkerType[\"DateRangeEnd\"] = \"dateRangeEnd\";\n    MarkerType[\"DayDivider\"] = \"dayDivider\";\n    MarkerType[\"Line\"] = \"line\";\n})(MarkerType || (MarkerType = {}));\nvar StreamingState;\n(function (StreamingState) {\n    StreamingState[\"Live\"] = \"live\";\n    StreamingState[\"Polling\"] = \"polling\";\n    StreamingState[\"PausedManually\"] = \"pausedManually\";\n    StreamingState[\"PausedScrolling\"] = \"pausedScrolling\";\n})(StreamingState || (StreamingState = {}));\nfunction isLog(arg) {\n    return !!arg && arg.data !== undefined;\n}\nclass LogStreamStore extends _StoreBase__WEBPACK_IMPORTED_MODULE_3__.StoreBase {\n    constructor(datasetStore, getLogsDelay = 0) {\n        super();\n        this.highlightIn = false;\n        this.highlightRowId = '';\n        // Currently no need to observe each individual log object. Observing just the array is enough.\n        this.logs = [];\n        this.queryParams = {\n            // Need to initialize to undefined so Mobx can observe it.\n            timestampStart: undefined,\n            timestampEnd: undefined,\n            quickRange: undefined,\n            queryString: undefined,\n            caseSensitive: undefined,\n            integrationsFilter: undefined,\n        };\n        this.reachedOldest = false;\n        this.reachedNewest = false;\n        this.scrolledToBottom = false;\n        this.scrolledToTop = true;\n        this.scrollTop = 0;\n        this.getLogsDelay = 0;\n        this.streamingEnabled = true;\n        this.ignoreEndTime = false;\n        this.isPartial = false;\n        this.overflows = false;\n        this.searchDirection = 'past';\n        this.streamingInterval = LOGS_REFRESH_RATE;\n        this.isPolling = false;\n        this.getLogsOp = new _StoreBase__WEBPACK_IMPORTED_MODULE_3__.SimpleOperationsTracker('getLogsOp');\n        this.isInitialLoad = true;\n        this.cancelEnableStreaming = false;\n        this.disposing = false;\n        this.previousOnScrollLogsCount = 0;\n        this.shouldReEnableStreaming = false;\n        this.streamingTimer = 0;\n        this.visibilityChangeTimer = 0;\n        this.wasStreamingEnabledWhenHidden = false;\n        this.lastQueryId = 0;\n        this.pollLogSearchTimeout = 0;\n        this.datasetStore = datasetStore;\n        this.getLogsDelay = getLogsDelay;\n        // Setup a reaction to call getLogs whenever the queryParams change.\n        this.queryParamsReaction = (0,mobx__WEBPACK_IMPORTED_MODULE_1__.reaction)(() => {\n            // React to any queryParams prop changing, or the selectedDatasetId.\n            return [\n                this.datasetStore.selectedDatasetId,\n                this.datasetStore.getVirtualFieldsOps.operation.hasRun,\n                Object.assign({}, this.queryParams),\n            ];\n        }, () => {\n            // Only call `getLogs` if something changed and there is a selectedDatasetId.\n            // `setQueryParams` can be called multiple times and end up the same.\n            // Especially in `LogStreamViewStore.urlReactions`\n            const jsQueryParams = (0,mobx__WEBPACK_IMPORTED_MODULE_1__.toJS)(this.queryParams);\n            if (this.datasetStore.selectedDatasetId) {\n                if (this.datasetStore.getVirtualFieldsOps.operation.hasRun) {\n                    const datasetChanged = this.datasetStore.selectedDatasetId !== this.previousSelectedDatasetId;\n                    if (datasetChanged) {\n                        // Fetch Dataset details.\n                        this.datasetStore.getActiveDataset();\n                    }\n                    if (datasetChanged || !lodash_isEqual__WEBPACK_IMPORTED_MODULE_0___default()(this.previousQueryParams, jsQueryParams)) {\n                        // Cancel any in-flight requests\n                        this.cancelGetLogs();\n                        window.clearInterval(this.streamingTimer);\n                        // Kick off a new query.\n                        this.getLogs();\n                    }\n                    this.previousSelectedDatasetId = this.datasetStore.selectedDatasetId;\n                    this.previousQueryParams = jsQueryParams;\n                }\n                else {\n                    // FIXME: When viewing a dataset's stream, this gets called twice.\n                    // Once here and once in LogsStreamFilter\n                    // Fix once virtual fields are returned with the Dataset info (getActiveDataset)\n                    // https://github.com/axiomhq/axiom/issues/1962\n                    this.datasetStore.getActiveDatasetVirtualFields();\n                }\n            }\n            else {\n                // Clear timers and streaming since there is no longer a selectedDatasetId.\n                window.clearTimeout(this.getLogsRetryTimer);\n                this.disableStreaming();\n                this.cancelGetLogs();\n            }\n        }, \n        // Since our default timestamp is undefined, something should call `setQueryParams` to kick this off.\n        { fireImmediately: false });\n        this.visibilityChangeReaction = (0,mobx__WEBPACK_IMPORTED_MODULE_1__.reaction)(() => [_ViewStore__WEBPACK_IMPORTED_MODULE_4__.viewStore.isHidden], () => {\n            window.clearTimeout(this.visibilityChangeTimer);\n            if (_ViewStore__WEBPACK_IMPORTED_MODULE_4__.viewStore.isHidden) {\n                // Tab is NOT active.\n                this.wasStreamingEnabledWhenHidden = this.streamingEnabled;\n                if (this.streamingEnabled) {\n                    this.streamingInterval = 5000;\n                    // Need to re-call enableStreaming to setup a new `setInterval`.\n                    this.enableStreaming();\n                    // Turn off streaming altogether after a bit.\n                    this.visibilityChangeTimer = window.setTimeout(() => {\n                        this.disableStreaming();\n                    }, 60000);\n                }\n            }\n            else {\n                // Tab is active again.\n                if (this.wasStreamingEnabledWhenHidden) {\n                    this.streamingInterval = LOGS_REFRESH_RATE;\n                    this.enableStreaming();\n                }\n            }\n        }, \n        // Don't fire immediately otherwise if the tab is \"hidden\" on load\n        // `wasStreamingEnabledWhenHidden` will be `true` and when you finally\n        // view the tab enableStreaming will be called and a dataset may not be selected.\n        { fireImmediately: false });\n    }\n    dispose() {\n        window.clearTimeout(this.getLogsRetryTimer);\n        window.clearTimeout(this.visibilityChangeTimer);\n        this.disposing = true;\n        this.disableStreaming();\n        this.queryParamsReaction();\n        this.visibilityChangeReaction();\n        this.cancelGetLogs();\n    }\n    get isLive() {\n        return this.streamingState === StreamingState.Live;\n    }\n    get isDateRange() {\n        const timestampStart = (0,_util_dates__WEBPACK_IMPORTED_MODULE_5__.currentTimestampStart)(this.queryParams.quickRange, this.queryParams.timestampStart);\n        return !!timestampStart;\n    }\n    get scrollToRowId() {\n        if ((0,_util_numbers__WEBPACK_IMPORTED_MODULE_6__.isNumeric)(this.scrollToIndex) && this.scrollToIndex < this.logs.length) {\n            return this.logs[this.scrollToIndex] && this.logs[this.scrollToIndex]._rowId;\n        }\n        else {\n            return undefined;\n        }\n    }\n    get streamingState() {\n        if (this.streamingEnabled) {\n            return StreamingState.Live;\n        }\n        else {\n            if (this.scrolledToBottom) {\n                // If date range has an \"end\" that isn't \"now\" then force PausedScrolling state,\n                // so that the \"Jump to Live\" arrow is displayed.\n                const timestampEnd = (0,_util_dates__WEBPACK_IMPORTED_MODULE_5__.parseTimestampNotNow)(this.queryParams.timestampEnd);\n                if (timestampEnd) {\n                    return StreamingState.PausedScrolling;\n                }\n                else {\n                    return StreamingState.PausedManually;\n                }\n            }\n            else {\n                return StreamingState.PausedScrolling;\n            }\n        }\n    }\n    get activeRow() {\n        const log = this.activeRowId && this.logs.find((l) => l._rowId === this.activeRowId);\n        return (log && isLog(log) && log) || undefined;\n    }\n    get newerRow() {\n        if (this.activeRowId) {\n            let index = this.logs.findIndex((ll) => ll._rowId === this.activeRowId);\n            index += 1;\n            while (index >= 0 && index < this.logs.length) {\n                if (isLog(this.logs[index])) {\n                    return this.logs[index];\n                }\n                index += 1;\n            }\n        }\n        return undefined;\n    }\n    get olderRow() {\n        if (this.activeRowId) {\n            let index = this.logs.findIndex((ll) => ll._rowId === this.activeRowId);\n            index -= 1;\n            while (index >= 0) {\n                if (isLog(this.logs[index])) {\n                    return this.logs[index];\n                }\n                index -= 1;\n            }\n        }\n        return undefined;\n    }\n    get activeQuery() {\n        const { queryString, caseSensitive, integrationsFilter } = (0,mobx__WEBPACK_IMPORTED_MODULE_1__.toJS)(this.queryParams);\n        const timestampStart = (0,_util_dates__WEBPACK_IMPORTED_MODULE_5__.currentTimestampStartNowAsUndefined)(this.queryParams.quickRange, this.queryParams.timestampStart);\n        const timestampEnd = (0,_util_dates__WEBPACK_IMPORTED_MODULE_5__.currentTimestampEndNowAsUndefined)(this.queryParams.quickRange, this.queryParams.timestampEnd);\n        return {\n            datasetId: this.datasetStore.selectedDatasetId,\n            queryString: queryString,\n            timestampStart: timestampStart,\n            timestampEnd: timestampEnd,\n            caseSensitive: caseSensitive,\n            integrationsFilter: integrationsFilter,\n        };\n    }\n    get activeQueryRequest() {\n        const { queryString, timestampStart, timestampEnd, caseSensitive, integrationsFilter } = this.activeQuery;\n        const queryOptions = {};\n        const queryParams = {\n            resolution: 'auto',\n            // Would be nice not to have to default but we live in a world where nobody gives a crap about making things easier for the frontend.\n            // We'll get to convert these back into undefined/blank later since the values will get put into Saved Queries.\n            startTime: timestampStart ? new Date(timestampStart).toISOString() : _util_dates__WEBPACK_IMPORTED_MODULE_5__.MIN_DATE.toISOString(),\n            endTime: timestampEnd ? new Date(timestampEnd).toISOString() : _util_dates__WEBPACK_IMPORTED_MODULE_5__.MAX_DATE.toISOString(),\n            queryOptions: queryOptions,\n        };\n        // Only add queryOptions if the user explicitly added them, otherwise it's harder to detect later if queryParams changed.\n        if (caseSensitive !== undefined) {\n            // 🐉🐉🐉\n            // Options pertain to filtering only right now and so might not be needed and are deleted below\n            queryOptions.caseSensitive = String(caseSensitive);\n        }\n        if (queryString) {\n            let actualQueryString = queryString;\n            // FUTURE: Remove someday?\n            // Make old Urls with `AxiomFilter:` in them work.\n            if (queryString.startsWith('AxiomFilter:')) {\n                actualQueryString = queryString.slice(12);\n            }\n            this.buildFilter(queryParams, actualQueryString);\n        }\n        // Remove empty queryOptions to keep from cluttering up the request\n        if (queryParams.queryOptions && !Object.keys(queryParams.queryOptions).length) {\n            delete queryParams.queryOptions;\n        }\n        if (integrationsFilter) {\n            queryOptions.integrationsFilter = integrationsFilter;\n        }\n        return queryParams;\n    }\n    scrollToBottom() {\n        this.scrollToIndex = this.logs.length - 1;\n        this.scrollToAlignment = 'bottom';\n        this.scrolledToBottom = true;\n        this.delayedClearScrollToIndex();\n    }\n    // Since we override in `LogStreamViewStore`, don't add a decorator, otherwise the parent won't be called.\n    setHighlightRowId(highlightRowId) {\n        (0,mobx__WEBPACK_IMPORTED_MODULE_1__.runInAction)(() => {\n            this.highlightRowId = highlightRowId || '';\n        });\n    }\n    // Since we override in `LogStreamViewStore`, don't add a decorator, otherwise the parent won't be called.\n    setActiveDataRowId(rowId) {\n        (0,mobx__WEBPACK_IMPORTED_MODULE_1__.runInAction)(() => {\n            this.activeRowId = rowId;\n            // We need to disable streaming when a row is active or else it\n            // can suddenly not be active as new data streams in and it gets automatically\n            // dropped.\n            if (rowId && this.streamingEnabled) {\n                this.shouldReEnableStreaming = !this.isInitialLoad; // re-enabled by default, unless this is the initial load.\n                this.disableStreaming();\n            }\n            else if (!rowId && this.shouldReEnableStreaming) {\n                this.shouldReEnableStreaming = false;\n                this.enableStreaming();\n            }\n        });\n        // Reload if rowId doesn't exist.\n        // 🐉🐉🐉\n        // Hoping this doesn't cause issues 🤞️\n        // It's debatable whether we want this.\n        if (this.activeRowId && !this.activeRow && !this.isInitialLoad) {\n            window.location.reload();\n        }\n    }\n    setGetLogsDelay(delay) {\n        this.getLogsDelay = delay;\n    }\n    // Since we override in `LogStreamViewStore`, don't add a decorator, otherwise the parent won't be called.\n    setQueryParams(timestampStart, timestampEnd, quickRange, queryString, appendQueryString, caseSensitive) {\n        // Only change queryParams if they're not `undefined`, because places like `jumpToLive` want\n        // to change the timestamp but keep the rest of the queryParams the same.\n        (0,mobx__WEBPACK_IMPORTED_MODULE_1__.runInAction)(() => {\n            if (timestampStart !== undefined || timestampEnd !== undefined) {\n                this.queryParams.timestampStart = timestampStart;\n                this.queryParams.timestampEnd = timestampEnd;\n                // Clear the quickRange setting if a timestampStart or timestampEnd is set.\n                this.queryParams.quickRange = undefined;\n            }\n            if (quickRange !== undefined) {\n                this.queryParams.quickRange = quickRange;\n                // Clear timestampStart and timestampEnd setting if a quickRange is set.\n                this.queryParams.timestampStart = undefined;\n                this.queryParams.timestampEnd = undefined;\n            }\n            if (queryString !== undefined) {\n                if (appendQueryString && this.queryParams.queryString) {\n                    // Separate with a space.\n                    this.queryParams.queryString += ` ${queryString}`;\n                }\n                else {\n                    this.queryParams.queryString = queryString;\n                }\n            }\n            if (caseSensitive !== undefined) {\n                this.queryParams.caseSensitive = caseSensitive;\n            }\n        });\n    }\n    // Since we override in `LogStreamViewStore`, don't add a decorator, otherwise the parent won't be called.\n    // Similar to setQueryParams except we don't ignore `undefined` values we'll set them.\n    setQueryParamsDateRange(timestampStart, timestampEnd, quickRange) {\n        (0,mobx__WEBPACK_IMPORTED_MODULE_1__.runInAction)(() => {\n            this.queryParams.timestampStart = timestampStart;\n            this.queryParams.timestampEnd = timestampEnd;\n            this.queryParams.quickRange = quickRange;\n        });\n    }\n    // Since we override in `LogStreamViewStore`, don't add a decorator, otherwise the parent won't be called.\n    setQueryParamsFilter(filter) {\n        (0,mobx__WEBPACK_IMPORTED_MODULE_1__.runInAction)(() => {\n            this.queryParams.queryString = filter ? JSON.stringify(filter) : filter;\n        });\n    }\n    setOverflows(overflows) {\n        this.overflows = overflows;\n        // If the LogStream page isn't overflowing we should either enable streaming\n        // or keeping loading logs in the future until it does.\n        // Otherwise the UI will just get stuck because there is not Bottom row to scroll down to.\n        // This can be tested by setting LOGS_PER_PAGE to a low number.\n        if (!overflows) {\n            if (this.reachedNewest) {\n                // Respect if the User pressed the pause button (cancelEnableStreaming === true).\n                if (!this.streamingEnabled && !this.cancelEnableStreaming) {\n                    this.enableStreaming();\n                }\n            }\n            else {\n                this.loadMoreLogsInFuture();\n            }\n        }\n    }\n    enableStreaming() {\n        // Cancel any polling\n        this.cancelGetLogs();\n        // Clear partial flags because tailing logs won't treat any as partial results\n        this.isPartial = false;\n        // Don't enable streaming if the date range has an \"end\" that isn't \"now\".\n        const timestampEnd = (0,_util_dates__WEBPACK_IMPORTED_MODULE_5__.parseTimestampNotNow)(this.queryParams.timestampEnd);\n        // Never stream when E2E_TESTING. It causes all types of chaos.\n        if (!this.disposing && !timestampEnd && \"false\" !== 'true') {\n            this.streamingEnabled = true;\n            this.cancelEnableStreaming = false;\n            this.searchDirection = 'future';\n            window.clearInterval(this.streamingTimer);\n            this.streamingTimer = window.setInterval((0,mobx__WEBPACK_IMPORTED_MODULE_1__.action)(() => {\n                if (!this.datasetStore.selectedDatasetId) {\n                    // Shouldn't happen but it seems to be.\n                    console.warn('selectedDatasetId not set');\n                    this.disableStreaming();\n                    // Exit early since we don't have a datasetId.\n                    return;\n                }\n                if (this.getLogsOp && !this.getLogsOp.status.finished) {\n                    // wait the last fetch\n                    return;\n                }\n                const newestLog = this.findNewestLog();\n                this.scrollToIndex = undefined;\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                this.operate(this.getLogsOp.operation, this.performLogSearch(newestLog === null || newestLog === void 0 ? void 0 : newestLog._rowId, LOGS_PER_PAGE, newestLog ? 'asc' : 'desc', undefined, true), (results) => {\n                    // Clear old errors.\n                    _components_Notification__WEBPACK_IMPORTED_MODULE_7__.notification.dismiss(TOAST_ID);\n                    // Don't add the logs if the user paused streaming while we were fetching, otherwise\n                    // it will immediately re-enable streaming when onScroll is triggered by us adding these logs.\n                    if (this.streamingEnabled) {\n                        // Create a lookup table to dedupe partial results\n                        const mapRowIdLog = this.logs.reduce((map, ll) => {\n                            map[ll._rowId] = ll;\n                            return map;\n                        }, {});\n                        // Filter out logs that are already displayed\n                        const newLogs = results.logs.filter((ll) => !mapRowIdLog[ll._rowId]);\n                        this.highlightIn = true;\n                        this.addLogs(newLogs);\n                        if (this.logs.length > 0) {\n                            this.removeOldestLogs();\n                            this.scrollToBottom();\n                        }\n                        else {\n                            // If there aren't results, no reason to keep hammering the server.\n                            // I guess we want to do this now:\n                            // https://github.com/axiomhq/axiom/issues/851\n                            // this.disableStreaming();\n                        }\n                    }\n                }, false, () => {\n                    // If it's a Network Error, retry after a delay\n                    if (this.getLogsOp.operation.disconnected) {\n                        this.getLogsRetryTimer = window.setTimeout(() => {\n                            this.enableStreaming();\n                        }, 5000);\n                    }\n                    return true;\n                }, TOAST_ID);\n            }), this.streamingInterval);\n        }\n    }\n    disableStreaming() {\n        this.highlightIn = false;\n        this.streamingEnabled = false;\n        this.cancelEnableStreaming = true;\n        window.clearInterval(this.streamingTimer);\n        // Don't do this here or loading logs in the past won't work.\n        // Clear any polling\n        // this.cancelGetLogs();\n    }\n    jumpToLive(reset) {\n        // CDEUTSCH 20200728: Attempt to remove because `getLogs` resets streamingEnabled.\n        // // Set the streaming enabled flag so we'll scroll to the bottom after the next fetch\n        // this.streamingEnabled = true;\n        // Using `reset` will force us to clear the other query params and get to the latest.ß\n        if (!reset && this.reachedNewest) {\n            // scrollToBottom doesn't work if there aren't any logs or if there isn't an overflow.\n            if (this.logs.length === 0 || !this.overflows) {\n                this.enableStreaming();\n            }\n            else {\n                this.scrollToBottom();\n            }\n        }\n        else {\n            // We don't know how many logs we'd need to load to get back to live, so\n            // jump to right now.\n            //\n            // There are cases where `queryParams.quickRange`, `this.queryParams.timestampStart`,\n            // and `this.queryParams.timestampEnd` will already be undefined, so we need to check\n            // if we should force a call to `getLogs`.\n            if (this.queryParams.quickRange === undefined &&\n                this.queryParams.timestampStart === undefined &&\n                this.queryParams.timestampEnd === undefined) {\n                this.getLogs();\n            }\n            else {\n                this.setQueryParamsDateRange(undefined, undefined, undefined);\n            }\n        }\n    }\n    onScroll(clientHeight, scrollHeight, scrollTop, prevScrollTop) {\n        // Toggle streaming based on if the user is at the bottom.\n        // Use -1 as a slight buffer.\n        // prettier-ignore\n        const isBottom = (clientHeight + scrollTop - scrollHeight) >= -1;\n        this.scrollTop = scrollTop;\n        if (isBottom) {\n            this.scrolledToBottom = true;\n            this.scrolledToTop = false;\n            // Ignore scrolling due to logs being added.\n            //\n            // CDEUTSCH: I can't replicate \"scrolling due to logs being added\" by searching in the past and scrolling down on a large dataset.\n            // Not sure if the `previousOnScrollLogsCount` is for a different scenario. Like few log results eventually hitting the bottom?\n            // The way it was previously was  preventing `loadMoreLogsInFuture` from firing if you scroll really fast. Particularly\n            // if you have a mouse with a spinning scroll wheel and let it just keep spinning.\n            // Going to try move the \"if statement\" to just protect `enableStreaming`.\n            // FUTURE: We can possibly try remove `previousOnScrollLogsCount` altogether.\n            if (this.reachedNewest && this.logs.length === this.previousOnScrollLogsCount) {\n                if (!this.streamingEnabled) {\n                    this.enableStreaming();\n                }\n            }\n            else if (!this.reachedNewest) {\n                this.loadMoreLogsInFuture();\n            }\n        }\n        else {\n            this.scrolledToBottom = false;\n            this.disableStreaming();\n            this.scrolledToTop = scrollTop <= 3;\n        }\n        this.clearScrollToIndex();\n        this.previousOnScrollLogsCount = this.logs.length;\n    }\n    loadMoreLogsInPast() {\n        if (this.isPolling && this.searchDirection === 'past') {\n            // Already fetching partial results so do nothing\n            return;\n        }\n        window.clearTimeout(this.getLogsRetryTimer);\n        const oldestLog = this.findOldestLog();\n        // Make sure we haven't already fetched logs before this timestamp.\n        // And make sure we haven't reached the \"oldest\" (`reachedOldest` could also mean the start of the date range).\n        if (oldestLog && !this.reachedOldest && this.lastLogInPastTimestamp !== oldestLog._rowId) {\n            this.searchDirection = 'past';\n            this.lastLogInPastTimestamp = oldestLog._rowId;\n            // Clear lastLogInFutureTimestamp, now that we're going the opposite direction, otherwise loadMoreLogsInFuture may not run.\n            this.lastLogInFutureTimestamp = undefined;\n            this.scrollToIndex = undefined;\n            const numNewLogsRequested = LOGS_PER_PAGE;\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.pollLogSearch(oldestLog._rowId, numNewLogsRequested, 'desc', undefined, undefined, (results) => {\n                const newLogs = results.logs;\n                this.isPartial = Boolean(results.isPartial);\n                this.minBlockTime = results.minBlockTime;\n                this.maxBlockTime = results.maxBlockTime;\n                this.rowsExamined = results.rowsExamined;\n                this.fieldValueFormatters = results.fieldValueFormatters;\n                if (!this.isPartial) {\n                    // If we got fewer results then we asked for, we're at the oldest.\n                    if (results.matchesCountBeforeDedup < numNewLogsRequested) {\n                        this.reachedOldest = true;\n                    }\n                    if (this.scrolledToTop && newLogs.length === 0) {\n                        // If we're still scrolled to the top and didn't load any more logs, then \"Load more\" is still showing,\n                        // so we need to kick it off again.\n                        this.loadMoreLogsInPast();\n                    }\n                }\n                // No need to do any more work if there aren't logs to add.\n                if (newLogs.length > 0) {\n                    // Set to the log at the beginning of the array, since that should be the one visible after the \"Load more\" row.\n                    const scrollToLog = this.logs.length > 0 ? this.logs[0] : undefined;\n                    this.addLogs(newLogs);\n                    // Have to check scroll position because it could change if the user scrolls while waiting for partial results.\n                    // Use scrollTop instead of scrolledToTop because we need a buffer to accommodate how browsers react to new\n                    // rows being added when you're in an overflowing div.\n                    // If you're scrolled too close to the top they want to keep the scrolling position where it is, therefore\n                    // we need to manually adjust the position in that scenario.\n                    if (this.scrollTop <= 90) {\n                        // Set scrollToIndex to where the \"former oldest\" log is to avoid jumping when we prepend logs.\n                        this.scrollToIndex = this.logs.findIndex((ll) => ll._rowId === (scrollToLog === null || scrollToLog === void 0 ? void 0 : scrollToLog._rowId));\n                        if (this.scrollToIndex < 0) {\n                            this.scrollToIndex = 0;\n                        }\n                        this.scrollToAlignment = 'top';\n                        this.delayedClearScrollToIndex();\n                    }\n                    if (this.logs.length > MAX_NUM_LOGS) {\n                        // Remove logs from the \"future\" (end of array) since we're loading in the past.\n                        this.logs.splice(MAX_NUM_LOGS, this.logs.length - MAX_NUM_LOGS);\n                        this.reachedNewest = false;\n                    }\n                }\n                // Always call this (even if we don't have new logs), because `reachedOldest` could have changed.\n                this.addDateRangeStartMarker();\n            }, () => {\n                // If it's a Network Error, retry after a delay\n                if (this.getLogsOp.operation.disconnected) {\n                    this.getLogsRetryTimer = window.setTimeout(() => {\n                        this.loadMoreLogsInPast();\n                    }, 5000);\n                }\n                return true;\n            });\n        }\n    }\n    loadMoreLogsInFuture() {\n        if (this.isPolling && this.searchDirection === 'future') {\n            // Already fetching partial results so do nothing\n            return;\n        }\n        window.clearTimeout(this.getLogsRetryTimer);\n        const newestLog = this.findNewestLog();\n        // Make sure we haven't already fetched logs after this timestamp.\n        // Also make sure we haven't reached the \"newest\" (`reachedNewest` could also mean the end of the date range).\n        if (newestLog && !this.reachedNewest && this.lastLogInFutureTimestamp !== newestLog._rowId) {\n            this.searchDirection = 'future';\n            this.lastLogInFutureTimestamp = newestLog._rowId;\n            // Clear lastLogInPastTimestamp, now that we're going the opposite direction, otherwise loadMoreLogsInPast may not run.\n            this.lastLogInPastTimestamp = undefined;\n            this.scrollToIndex = undefined;\n            const numNewLogsRequested = LOGS_PER_PAGE;\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.pollLogSearch(newestLog._rowId, numNewLogsRequested, 'asc', undefined, undefined, (results) => {\n                const newLogs = results.logs;\n                this.isPartial = Boolean(results.isPartial);\n                this.minBlockTime = results.minBlockTime;\n                this.maxBlockTime = results.maxBlockTime;\n                this.rowsExamined = results.rowsExamined;\n                this.fieldValueFormatters = results.fieldValueFormatters;\n                if (!this.isPartial) {\n                    // If we got fewer results then we asked for, we're at the newest.\n                    if (results.matchesCountBeforeDedup < numNewLogsRequested) {\n                        this.reachedNewest = true;\n                    }\n                    if (this.scrolledToBottom && this.reachedNewest) {\n                        this.enableStreaming();\n                    }\n                }\n                // No need to do any more work if there aren't logs to add.\n                if (newLogs.length > 0) {\n                    // Set to the log at the end of the array, since that should be the one visible before the \"Load more\" row.\n                    const scrollToLog = this.logs.length > 0 ? this.logs[this.logs.length - 1] : undefined;\n                    this.addLogs(newLogs);\n                    this.removeOldestLogs();\n                    if (this.scrolledToBottom) {\n                        // Set scrollToIndex to where the \"former oldest\" log is to avoid jumping when we prepend logs.\n                        this.scrollToIndex = this.logs.findIndex((ll) => ll._rowId === (scrollToLog === null || scrollToLog === void 0 ? void 0 : scrollToLog._rowId));\n                        if (this.scrollToIndex < 0) {\n                            this.scrollToIndex = 0;\n                        }\n                        this.scrollToAlignment = 'bottom';\n                        this.delayedClearScrollToIndex();\n                    }\n                }\n                // Always call this (even if we don't have new logs), because `reachedNewest` could have changed.\n                this.addDateRangeEndMarker();\n            }, () => {\n                // If it's a Network Error, retry after a delay\n                if (this.getLogsOp.operation.disconnected) {\n                    this.getLogsRetryTimer = window.setTimeout(() => {\n                        this.loadMoreLogsInFuture();\n                    }, 5000);\n                }\n                return true;\n            });\n        }\n    }\n    forceLoadMoreLogsInFuture() {\n        // Signals that we should ignore queryParams.endTime so that we can actually load more logs past the current end time.\n        this.ignoreEndTime = true;\n        // Reset some state.\n        this.reachedNewest = false;\n        this.scrolledToBottom = true;\n        this.scrolledToTop = false;\n        // Remove DateRangeEnd marker.\n        const lastLog = this.logs[this.logs.length - 1];\n        const dateRangeEndExists = lastLog && !isLog(lastLog) && lastLog.markerType === MarkerType.DateRangeEnd;\n        if (dateRangeEndExists) {\n            this.logs.pop();\n        }\n        this.loadMoreLogsInFuture();\n    }\n    clearScrollToIndex() {\n        this.scrollToAlignment = undefined;\n        this.scrollToIndex = undefined;\n    }\n    cancelGetLogs() {\n        // Clear polling vars\n        this.isPolling = false;\n        window.clearTimeout(this.pollLogSearchTimeout);\n        // Never enable this.\n        // It will cause pollLogSearch to have unexpected results because `queryId` can have repeated values.\n        // this.lastQueryId = 0;\n        // Clear any fetching related vars\n        this.lastLogInPastTimestamp = undefined;\n        this.lastLogInFutureTimestamp = undefined;\n    }\n    // 🐉🐉🐉\n    // NOTE: Calling with the string `now` will have a different scroll behavior than with `Date.now()`\n    getLogs() {\n        window.clearTimeout(this.getLogsRetryTimer);\n        // Reset the state of getLogsOp every time getLogs is called.\n        // We want it to look like it hasn't run. (!hasRun)\n        this.getLogsOp = new _StoreBase__WEBPACK_IMPORTED_MODULE_3__.SimpleOperationsTracker('getLogsOp');\n        // Clear `last` variables, otherwise loadMoreLogsIn* may not run.\n        this.lastLogInFutureTimestamp = undefined;\n        this.lastLogInPastTimestamp = undefined;\n        // Reset all the state, since we want this to behave like a fresh loading of the LogsStreamPage.\n        this.logs = [];\n        this.highlightIn = false;\n        this.ignoreEndTime = false;\n        this.reachedOldest = false;\n        this.reachedNewest = false;\n        this.scrollToIndex = undefined;\n        this.isPartial = false;\n        this.minBlockTime = undefined;\n        this.maxBlockTime = undefined;\n        this.rowsExamined = undefined;\n        this.previousOnScrollLogsCount = 0;\n        this.streamingEnabled = false; // This used to be `true`, but with partial results we need to wait for those to finish (I think)\n        this.cancelEnableStreaming = false;\n        // For dateRanges, load records in the future relative to the requested timestamp (asc)\n        // For \"live\", load records in the past (desc).\n        const order = this.isDateRange ? 'asc' : 'desc';\n        this.searchDirection = order === 'asc' ? 'future' : 'past';\n        let scrolled = false;\n        const cursorRowId = this.activeRowId;\n        if (cursorRowId) {\n            this.cancelEnableStreaming = true;\n        }\n        // the delay allows the slide-up animation to finish while still displaying the loading spinner.\n        const fetch = (0,mobx__WEBPACK_IMPORTED_MODULE_1__.action)(() => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.pollLogSearch(cursorRowId, LOGS_PER_PAGE, order, undefined, true, (0,mobx__WEBPACK_IMPORTED_MODULE_1__.action)((results) => {\n                const newLogs = results.logs;\n                // Set partial results properties\n                this.isPartial = Boolean(results.isPartial);\n                this.minBlockTime = results.minBlockTime;\n                this.maxBlockTime = results.maxBlockTime;\n                this.rowsExamined = results.rowsExamined;\n                this.fieldValueFormatters = results.fieldValueFormatters;\n                if (this.isDateRange) {\n                    // Check if the specified row is out of the bounds of the date range.\n                    if (cursorRowId) {\n                        const cursor = newLogs.find((ll) => ll._rowId === cursorRowId);\n                        if (cursor) {\n                            const cursorDateTimestamp = new Date(cursor._time).getTime();\n                            if (cursorDateTimestamp < (this.activeQuery.timestampStart || Number.MIN_SAFE_INTEGER) ||\n                                cursorDateTimestamp > (this.activeQuery.timestampEnd || Number.MAX_SAFE_INTEGER)) {\n                                (0,mobx__WEBPACK_IMPORTED_MODULE_1__.runInAction)(() => {\n                                    this.setQueryParamsDateRange();\n                                });\n                            }\n                        }\n                    }\n                    if (!this.isPartial) {\n                        this.reachedNewest = results.matchesCountBeforeDedup < LOGS_PER_PAGE;\n                        // Since this is a time range, `reachedOldest` needs to be set to true,\n                        // unless a cursor was specified then we need to do another fetch to check.\n                        if (!cursorRowId) {\n                            this.reachedOldest = true;\n                        }\n                    }\n                    // No need to do any more work if there aren't logs to add.\n                    if (newLogs.length > 0) {\n                        // For the case where the user has scrolled to the top, set to the\n                        // log at the beginning of the array, since that should be the one visible after the \"Searched back to\" row.\n                        const scrollToLog = this.logs.length > 0 ? this.logs[0] : undefined;\n                        this.addLogs(newLogs);\n                        // Since a specific date was requested, insert a Line to indicate the\n                        // start of the date range.\n                        this.addDateRangeStartMarker(!cursorRowId);\n                        if (!scrolled) {\n                            scrolled = true;\n                            // Default to false since a timestamp was specified.\n                            this.scrolledToBottom = false;\n                        }\n                        else if (this.scrolledToTop) {\n                            // Set scrollToIndex to where the \"former oldest\" log is to avoid jumping when we prepend logs.\n                            this.scrollToIndex = this.logs.findIndex((ll) => ll._rowId === (scrollToLog === null || scrollToLog === void 0 ? void 0 : scrollToLog._rowId));\n                            if (this.scrollToIndex < 0) {\n                                this.scrollToIndex = 0;\n                            }\n                            this.scrollToAlignment = 'top';\n                            this.delayedClearScrollToIndex();\n                        }\n                        this.addDateRangeEndMarker();\n                    }\n                }\n                else {\n                    if (!this.isPartial) {\n                        // This likely won't be true is a cursorRowId is set so we skip the check.\n                        if (!cursorRowId) {\n                            // If a \"now\" timestamp was specified, we just returned the most recent data so we're at the end.\n                            this.reachedNewest = true;\n                        }\n                        this.reachedOldest = results.matchesCountBeforeDedup < LOGS_PER_PAGE; // If we didn't get the requested number of rows we hit the beginning.\n                        // This call was triggered with the intention to begin streaming,\n                        // but we needed to let partial results finish first. Now that\n                        // they're finished check if we're in the correct scrolling position; BUT first\n                        // handle one more edge case where the \"Loading more in past\" row is visible.\n                        // We need to prioritize loading in the past because there won't be a way to scroll to it in the case\n                        // where all rows are visible.\n                        // If there are zero logs total, then we want to enable streaming so that we keep\n                        // checking for logs in the background.\n                        if (this.scrolledToTop && newLogs.length === 0 && this.logs.length > 0) {\n                            // If we're scrolled to the top and didn't load any more logs, then \"Searching back to\" is showing,\n                            // and it's about to switch to the \"Loading more\" placeholder, but it won't load more unless we actually\n                            // call this.\n                            this.loadMoreLogsInPast();\n                        }\n                        else if (!cursorRowId && // Don't enable streaming if there was a specific row requested.\n                            ((!this.cancelEnableStreaming && this.scrolledToBottom) || this.logs.length === 0)) {\n                            this.enableStreaming();\n                        }\n                    }\n                    // No need to do any more work if there aren't logs to add.\n                    if (newLogs.length > 0) {\n                        // For the case where the user has scrolled to the top, set to the\n                        // log at the beginning of the array, since that should be the one visible after the \"Searched back to\" row.\n                        const scrollToLog = this.logs.length > 0 ? this.logs[0] : undefined;\n                        this.addLogs(newLogs);\n                        // Only scroll the first time we have some results.\n                        if (!scrolled) {\n                            scrolled = true;\n                            this.scrollToBottom();\n                            if (!this.isPartial && !cursorRowId) {\n                                // Enable streaming if we have a full result set.\n                                this.enableStreaming();\n                            }\n                        }\n                        else if (this.scrolledToTop) {\n                            // Set scrollToIndex to where the \"former oldest\" log is to avoid jumping when we prepend logs.\n                            this.scrollToIndex = this.logs.findIndex((ll) => ll._rowId === (scrollToLog === null || scrollToLog === void 0 ? void 0 : scrollToLog._rowId));\n                            if (this.scrollToIndex < 0) {\n                                this.scrollToIndex = 0;\n                            }\n                            this.scrollToAlignment = 'top';\n                            this.delayedClearScrollToIndex();\n                        }\n                    }\n                }\n                // Give the initial set of rows a moment to load. We don't need to highlight those.\n                window.setTimeout((0,mobx__WEBPACK_IMPORTED_MODULE_1__.action)(() => {\n                    this.highlightIn = true;\n                }), 500);\n                this.isInitialLoad = false;\n            }), (0,mobx__WEBPACK_IMPORTED_MODULE_1__.action)((err) => {\n                // If it's a Network Error, retry after a delay\n                if (this.getLogsOp.operation.disconnected) {\n                    this.getLogsRetryTimer = window.setTimeout(() => {\n                        this.getLogs();\n                    }, 5000);\n                }\n            }));\n        });\n        if (this.getLogsDelay) {\n            window.setTimeout(() => {\n                fetch();\n            }, this.getLogsDelay);\n        }\n        else {\n            fetch();\n        }\n        // reset to zero after every call.\n        this.setGetLogsDelay(0);\n    }\n    resetStore() {\n        this.previousSelectedDatasetId = undefined;\n    }\n    delayedClearScrollToIndex() {\n        // Clear scrollToIndex after a long enough time where the components have updated, but before another partial result comes in.\n        // This allows us to set scrollToIndex to the same `rowId` without `LogStream.tsx` rejecting it.\n        window.setTimeout(() => {\n            this.clearScrollToIndex();\n        }, 50);\n    }\n    findOldestLog() {\n        // Since logs are sorted oldest to newest, start search from the start of the array.\n        for (let i = 0; i < this.logs.length; i = i + 1) {\n            const item = this.logs[i];\n            if (isLog(item)) {\n                return item;\n            }\n        }\n        return undefined;\n    }\n    findNewestLog() {\n        // Since logs are sorted oldest to newest, start search from the end of the array.\n        for (let i = this.logs.length - 1; i >= 0; i = i - 1) {\n            const item = this.logs[i];\n            if (isLog(item)) {\n                return item;\n            }\n        }\n        return undefined;\n    }\n    buildFilter(queryRequest, query) {\n        var _a;\n        queryRequest.filter = JSON.parse(query);\n        // We need to manually add all VirtualFields that were referenced in the filter to the final queryRequest to prevent the server from having to do any extra work.\n        const containsVirtualField = (filter, virtualFieldName) => {\n            if (!filter) {\n                return false;\n            }\n            if (filter.field === virtualFieldName) {\n                return true;\n            }\n            else if (filter.children) {\n                return filter.children.some((child) => containsVirtualField(child, virtualFieldName));\n            }\n            else {\n                return false;\n            }\n        };\n        const queryVirtualFields = this.datasetStore.virtualFields.filter((vf) => containsVirtualField(queryRequest.filter, vf.name));\n        // Map virtual fields to columns\n        const virtualColumns = Object.values(queryVirtualFields).map(({ name, expression }) => ({\n            alias: name,\n            expr: expression,\n        }));\n        queryRequest.virtualFields = virtualColumns.length ? virtualColumns : undefined;\n        (0,_DatasetStore__WEBPACK_IMPORTED_MODULE_8__.setCaseSensitive)(queryRequest.filter, ((_a = queryRequest === null || queryRequest === void 0 ? void 0 : queryRequest.queryOptions) === null || _a === void 0 ? void 0 : _a.caseSensitive) === 'true');\n    }\n    performLogSearch(cursorRowId, // Cursor is on an event basis, so you can tell axiomdb to skip all events until after the cursor (useful to prevent duplicates on the Stream view)\n    limit, order, continuationToken, // ContinuationToken is on a query basis, i.e. axiomdb couldn’t build a complete result so its sending you a first part and a “cursor” which you can set on the same request and send it again to get a (more) complete result (aka streaming query)\n    stream, includeCursor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { datasetId } = this.activeQuery;\n            if (!datasetId) {\n                // This shouldn't happen (in theory)\n                throw new Error('DatasetId not set');\n            }\n            const payload = Object.assign(Object.assign({}, this.activeQueryRequest), { limit: limit, order: [{ field: '_time', desc: order === 'desc' }] });\n            // Used when a customer wants to \"load more in future\" on a custom date range.\n            if (this.ignoreEndTime) {\n                payload.endTime = _util_dates__WEBPACK_IMPORTED_MODULE_5__.MAX_DATE.toISOString();\n            }\n            if (cursorRowId) {\n                payload.cursor = cursorRowId;\n            }\n            if (continuationToken) {\n                payload.continuationToken = continuationToken;\n            }\n            payload.includeCursor = includeCursor;\n            const params = { id: datasetId };\n            if (stream) {\n                params['streaming-duration'] = '1s';\n            }\n            // Allow Axiom to set nocache via the page Url for debugging.\n            const { activeQuery } = _ViewStore__WEBPACK_IMPORTED_MODULE_4__.viewStore;\n            params.nocache = activeQuery.nocache === 'true';\n            const streamingEnabled = this.streamingEnabled;\n            // Have to do `payload as any` because of Filter mismatch.\n            return _shared_dash__WEBPACK_IMPORTED_MODULE_9__.dashApi.queryDataset(params, payload).then((results) => {\n                var _a;\n                // Skip parsing server error messages if we're streaming. (prevents errors continuing to popup after you dismiss them)\n                if (!streamingEnabled) {\n                    parseQueryMessages(results);\n                }\n                let rslts = (results.matches || []).map((item) => {\n                    const dateTime = new Date(item._time);\n                    const data = item.data || {};\n                    const dataKeys = (0,_DatasetStore__WEBPACK_IMPORTED_MODULE_8__.pickRawKeys)(data);\n                    const l = {\n                        _time: item._time,\n                        _sysTime: item._sysTime,\n                        _rowId: item._rowId,\n                        data: data,\n                        dataKeys: dataKeys,\n                        hostname: data.hostname,\n                        application: data.application,\n                        text: data.text,\n                        severity: (0,_DatasetStore__WEBPACK_IMPORTED_MODULE_8__.getSeverity)(item.data),\n                        // Format the date/time once/now, so we don't have to keep doing it inside the components when re-rendering.\n                        formattedDate: this.formatDate(dateTime),\n                        formattedDateTime: this.formatDateTime(dateTime),\n                    };\n                    return l;\n                });\n                // we always want ascending logs\n                if (order === 'desc') {\n                    rslts = rslts.reverse();\n                }\n                const status = results.status;\n                const fieldValueFormatters = (0,_ElementsDatasetStore__WEBPACK_IMPORTED_MODULE_10__.fieldsMetaToFieldValueFormatters)(results.fieldsMeta);\n                const searchResult = {\n                    isPartial: status.isPartial,\n                    continuationToken: status.continuationToken,\n                    matchesCountBeforeDedup: ((_a = results.matches) === null || _a === void 0 ? void 0 : _a.length) || 0,\n                    minBlockTime: status.minBlockTime,\n                    maxBlockTime: status.maxBlockTime,\n                    rowsExamined: status.rowsExamined,\n                    logs: rslts,\n                    fieldValueFormatters: fieldValueFormatters,\n                };\n                return searchResult;\n            });\n        });\n    }\n    pollLogSearch(cursorRowId, limit, order, continuationToken, includeCursor, next, onError) {\n        if (!this.datasetStore.selectedDatasetId) {\n            throw new Error('selectedDatasetId not set');\n        }\n        this.isPolling = true;\n        // clear timeout\n        window.clearTimeout(this.pollLogSearchTimeout);\n        const queryId = this.lastQueryId + 1;\n        this.lastQueryId = queryId;\n        const search = this.performLogSearch(cursorRowId, limit, order, continuationToken, true, includeCursor).then((results) => {\n            if (this.lastQueryId === queryId) {\n                if (results.isPartial && !E2E_TESTING) {\n                    this.pollLogSearchTimeout = window.setTimeout(() => {\n                        this.pollLogSearch(cursorRowId, limit, order, results.continuationToken, includeCursor, next, onError);\n                    }, 250);\n                }\n                else {\n                    (0,mobx__WEBPACK_IMPORTED_MODULE_1__.runInAction)(() => {\n                        this.isPolling = false;\n                    });\n                }\n            }\n            return results;\n        });\n        // Call fn with subsequent partial results if no other request has been made.\n        const nextWrapped = (results) => {\n            if (this.lastQueryId === queryId && next) {\n                // Clear old errors.\n                _components_Notification__WEBPACK_IMPORTED_MODULE_7__.notification.dismiss(TOAST_ID);\n                // Create a lookup table to dedupe partial results\n                const mapRowIdLog = this.logs.reduce((map, ll) => {\n                    map[ll._rowId] = ll;\n                    return map;\n                }, {});\n                // Filter out logs that are already displayed\n                results.logs = results.logs.filter((ll) => !mapRowIdLog[ll._rowId]);\n                next(results);\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.operate(this.getLogsOp.operation, search, nextWrapped, undefined, undefined, TOAST_ID, (0,mobx__WEBPACK_IMPORTED_MODULE_1__.action)((err) => {\n            // Ignore stale query errors.\n            if (this.lastQueryId === queryId) {\n                return this.handleError(this.getLogsOp.operation, err, false, onError);\n            }\n            else {\n                return undefined;\n            }\n        }));\n    }\n    addLogs(newLogs) {\n        // Add new logs.\n        this.logs.push(...newLogs);\n        // Remove old day dividers.\n        this.logs = this.logs.filter((log) => isLog(log) || log.markerType !== MarkerType.DayDivider);\n        // Sort logs.\n        this.logs = this.logs.slice().sort((a, b) => {\n            // According to mhr3 \"rowId is lexicographically sortable\"\n            return a._rowId.localeCompare(b._rowId);\n        });\n        // Re-add day dividers.\n        this.addDayDividers();\n    }\n    addDayDividers(start, end) {\n        const logs = this.logs;\n        const startIndex = !start || start < 0 ? 0 : start;\n        let endIndex = !end || end > logs.length ? logs.length : end;\n        for (let xx = startIndex; xx < endIndex; xx += 1) {\n            const prevLog = xx > 0 ? logs[xx - 1] : logs[xx];\n            // Skip Start and End Markers.\n            if (isLog(prevLog) ||\n                (prevLog.markerType !== MarkerType.DateRangeStart && prevLog.markerType !== MarkerType.DateRangeEnd)) {\n                const isSameDay = moment_timezone__WEBPACK_IMPORTED_MODULE_2___default().tz(logs[xx]._time, _UserProfileStore__WEBPACK_IMPORTED_MODULE_11__.userProfileStore.timeZone)\n                    .isSame(moment_timezone__WEBPACK_IMPORTED_MODULE_2___default().tz(prevLog._time, _UserProfileStore__WEBPACK_IMPORTED_MODULE_11__.userProfileStore.timeZone), 'day');\n                if (!isSameDay && logs[xx].markerType !== MarkerType.DayDivider) {\n                    // insert a day divider marker\n                    const dateTime = new Date(logs[xx]._time);\n                    const isoString = dateTime.toISOString();\n                    const marker = {\n                        _time: isoString,\n                        _sysTime: isoString,\n                        _rowId: dateToTimestamp36(dateTime),\n                        markerType: MarkerType.DayDivider,\n                        formattedDate: this.formatDate(dateTime),\n                        formattedDateTime: this.formatDateTime(dateTime),\n                    };\n                    logs.splice(xx, 0, marker);\n                    // we've just inserted new \"log\"\n                    endIndex += 1;\n                }\n            }\n        }\n    }\n    addDateRangeStartMarker(reachedOldestOverride) {\n        // Add a marker if there is a timestampStart and we reached the oldest one.\n        const timestampStart = this.activeQuery.timestampStart;\n        const firstLog = this.logs[0];\n        const dateRangeStartExists = firstLog && !isLog(firstLog) && firstLog.markerType === MarkerType.DateRangeStart;\n        if (!dateRangeStartExists &&\n            this.logs.length > 0 &&\n            timestampStart &&\n            (this.reachedOldest || reachedOldestOverride)) {\n            const dateTime = new Date(timestampStart);\n            const isoString = dateTime.toISOString();\n            const marker = {\n                _time: isoString,\n                _sysTime: isoString,\n                _rowId: dateToTimestamp36(dateTime),\n                markerType: MarkerType.DateRangeStart,\n                formattedDate: this.formatDate(dateTime),\n                formattedDateTime: this.formatDateTime(dateTime),\n            };\n            this.logs.unshift(marker);\n        }\n    }\n    addDateRangeEndMarker() {\n        // Ignore quickRange because \"end\" is always going to be \"now\".\n        const queryParamsTimestampEnd = (0,_util_dates__WEBPACK_IMPORTED_MODULE_5__.parseTimestampNotNow)(this.queryParams.timestampEnd);\n        // Add a marker if there is a timestampEnd and we reached the newest one.\n        const lastLog = this.logs[this.logs.length - 1];\n        const dateRangeEndExists = lastLog && !isLog(lastLog) && lastLog.markerType === MarkerType.DateRangeEnd;\n        if (!dateRangeEndExists && this.logs.length > 0 && queryParamsTimestampEnd && this.reachedNewest) {\n            const dateTime = new Date(queryParamsTimestampEnd);\n            const isoString = dateTime.toISOString();\n            const marker = {\n                _time: isoString,\n                _sysTime: isoString,\n                _rowId: dateToTimestamp36(dateTime),\n                markerType: MarkerType.DateRangeEnd,\n                formattedDate: this.formatDate(dateTime),\n                formattedDateTime: this.formatDateTime(dateTime),\n            };\n            this.logs.push(marker);\n        }\n    }\n    formatDate(dateTime) {\n        return (0,_util_dates__WEBPACK_IMPORTED_MODULE_5__.formattedDateShort)(_UserProfileStore__WEBPACK_IMPORTED_MODULE_11__.userProfileStore.timeZone, dateTime);\n    }\n    formatDateTime(dateTime) {\n        return (0,_util_dates__WEBPACK_IMPORTED_MODULE_5__.formattedDateShort)(_UserProfileStore__WEBPACK_IMPORTED_MODULE_11__.userProfileStore.timeZone, dateTime, {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hourCycle: 'h23',\n        });\n    }\n    removeOldestLogs() {\n        if (this.logs.length > MAX_NUM_LOGS) {\n            // Remove logs from the \"past\" (beginning of array) since we're loading in the future.\n            const removedLogs = this.logs.splice(0, this.logs.length - MAX_NUM_LOGS);\n            this.reachedOldest = false;\n            return removedLogs.length;\n        }\n        return 0;\n    }\n}\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"highlightIn\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"highlightRowId\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable.shallow\n], LogStreamStore.prototype, \"logs\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"fieldValueFormatters\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"queryParams\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"queryParserError\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"reachedOldest\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"reachedNewest\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"scrollToAlignment\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"scrollToIndex\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"scrolledToBottom\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"scrolledToTop\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"scrollTop\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"getLogsDelay\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"streamingEnabled\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"activeRowId\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"ignoreEndTime\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"isPartial\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"maxBlockTime\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"minBlockTime\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"rowsExamined\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"overflows\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"searchDirection\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"streamingInterval\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.observable\n], LogStreamStore.prototype, \"isPolling\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.computed\n], LogStreamStore.prototype, \"isLive\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.computed\n], LogStreamStore.prototype, \"isDateRange\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.computed\n], LogStreamStore.prototype, \"scrollToRowId\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.computed\n], LogStreamStore.prototype, \"streamingState\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.computed\n], LogStreamStore.prototype, \"activeRow\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.computed\n], LogStreamStore.prototype, \"newerRow\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.computed\n], LogStreamStore.prototype, \"olderRow\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.computed\n], LogStreamStore.prototype, \"activeQuery\", null);\n__decorate([\n    (0,mobx__WEBPACK_IMPORTED_MODULE_1__.computed)({ keepAlive: true }) // Add keepAlive to cache the result, because this isn't be observed anywhere.\n], LogStreamStore.prototype, \"activeQueryRequest\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound\n], LogStreamStore.prototype, \"scrollToBottom\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound\n], LogStreamStore.prototype, \"setGetLogsDelay\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound\n], LogStreamStore.prototype, \"setOverflows\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound\n], LogStreamStore.prototype, \"enableStreaming\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound\n], LogStreamStore.prototype, \"disableStreaming\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound\n], LogStreamStore.prototype, \"jumpToLive\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound\n], LogStreamStore.prototype, \"onScroll\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound\n], LogStreamStore.prototype, \"loadMoreLogsInPast\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound\n], LogStreamStore.prototype, \"loadMoreLogsInFuture\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound\n], LogStreamStore.prototype, \"forceLoadMoreLogsInFuture\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound\n], LogStreamStore.prototype, \"clearScrollToIndex\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound\n], LogStreamStore.prototype, \"cancelGetLogs\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound\n], LogStreamStore.prototype, \"getLogs\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound\n], LogStreamStore.prototype, \"resetStore\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_1__.action.bound\n], LogStreamStore.prototype, \"pollLogSearch\", null);\n// Encode the TimeStamp so it matches the first chunk of our `rowId`.\nfunction dateToTimestamp36(date) {\n    const nanoSecs = BigInt(date.valueOf()) * BigInt(1000000);\n    const ts = nanoSecs.toString(36).padStart(13, '0');\n    return `${ts}-0000000000000000-0000`;\n}\nfunction parseQueryMessages(response) {\n    var _a;\n    const messages = ((_a = response.status) === null || _a === void 0 ? void 0 : _a.messages) || [];\n    messages.forEach((message) => {\n        let priority = 'Error';\n        switch (message.priority) {\n            // Skip localizing the debug and trace since that shouldn't really happen.\n            case 'trace':\n                priority = 'Trace';\n                break;\n            case 'debug':\n                priority = 'Debug';\n                break;\n            case 'info':\n                priority = 'Info';\n                break;\n            case 'warn':\n                priority = 'Warning';\n                break;\n            case 'error':\n                priority = 'Error';\n                break;\n            case 'fatal':\n                priority = 'Fatal';\n                break;\n        }\n        if (['trace', 'debug', 'info'].includes(message.priority)) {\n            _components_Notification__WEBPACK_IMPORTED_MODULE_7__.notification.info({ message: priority, description: message.msg }, { autoClose: false, toastId: message.msg });\n        }\n        else {\n            _components_Notification__WEBPACK_IMPORTED_MODULE_7__.notification.error({ message: priority, description: message.msg }, { autoClose: false, toastId: message.msg });\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30413\n");

/***/ }),

/***/ 86051:
/*!**********************************************!*\
  !*** ./lib/dash/stores/QueryHistoryStore.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HISTORY_DATASET\": () => (/* binding */ HISTORY_DATASET),\n/* harmony export */   \"QueryHistoryStore\": () => (/* binding */ QueryHistoryStore),\n/* harmony export */   \"mapEntryToHistoryInfo\": () => (/* binding */ mapEntryToHistoryInfo)\n/* harmony export */ });\n/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ 50265);\n/* harmony import */ var _shared_dash__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/dash */ 81002);\n/* harmony import */ var _LogStreamStore__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./LogStreamStore */ 30413);\n/* harmony import */ var _StoreBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StoreBase */ 53769);\n/* harmony import */ var _UserStatusStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UserStatusStore */ 41582);\n/* harmony import */ var _ViewStore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ViewStore */ 77776);\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// cSpell: ignore nocache\n\n\n\n\n\n\nconst PAGE_SIZE = 50;\nconst mapEntryToHistoryInfo = (entry) => {\n    var _a;\n    const query = entry.data;\n    return {\n        id: query.id,\n        dataset: query.dataset,\n        metadata: query.metadata,\n        query: query.query,\n        queryType: query.kind,\n        createdBy: query.who,\n        isMine: ((_a = _UserStatusStore__WEBPACK_IMPORTED_MODULE_1__.userStatusStore.user) === null || _a === void 0 ? void 0 : _a.id) === query.who,\n        created: new Date(query.created).getTime(),\n        name: query.name,\n        type: 'history',\n        _rowId: entry._rowId,\n    };\n};\nconst HISTORY_DATASET = 'axiom-history';\nclass QueryHistoryStore extends _StoreBase__WEBPACK_IMPORTED_MODULE_2__.StoreBase {\n    constructor() {\n        super(...arguments);\n        // Operations trackers\n        this.getQueryHistoryOps = new _StoreBase__WEBPACK_IMPORTED_MODULE_2__.SimpleOperationsTracker('getQueryHistory');\n        this.hasMore = false;\n        this.queries = [];\n    }\n    pushLocalQuery(query) {\n        this.queries.unshift(query);\n    }\n    getQueries(params) {\n        var _a;\n        // Store the query so we can set the tab\n        this.lastQuery = params;\n        // Clear the queries so we don't display any aren't relevant to the query\n        this.queries = [];\n        // Clear the operation so we don't see a none found message\n        this.getQueryHistoryOps.removeOperation('getQueryHistory');\n        const { kind, dataset, who, apl } = params;\n        const filter = {\n            op: 'and',\n            field: '',\n            children: [\n                { op: '==', field: 'kind', value: kind },\n                { op: who ? '==' : '!=', field: 'who', value: (_a = _UserStatusStore__WEBPACK_IMPORTED_MODULE_1__.userStatusStore.user) === null || _a === void 0 ? void 0 : _a.id },\n            ],\n        };\n        if (dataset) {\n            filter.children.push({ op: '==', field: 'dataset', value: dataset });\n        }\n        if (apl) {\n            filter.children.push({ op: 'contains', field: 'query.apl', value: apl });\n        }\n        const query = {\n            order: [{ field: '_time', desc: true }],\n            startTime: new Date(0).toISOString(),\n            endTime: new Date().toISOString(),\n            resolution: 'auto',\n            filter: filter, // Make TypeScript happy about Enum issues.\n        };\n        const pageSize = params.pageSize || PAGE_SIZE;\n        this.performQuery({\n            id: HISTORY_DATASET,\n            payload: Object.assign(Object.assign({}, query), { limit: pageSize }),\n            nocache: _ViewStore__WEBPACK_IMPORTED_MODULE_3__.viewStore.activeQuery.nocache === 'true', // Allow Axiom to set nocache via the page Url for debugging.\n        }); // Gave up on trying to get 'as ApiQueryRequest' working\n    }\n    loadMoreQueries() {\n        if (!this.lastParams) {\n            throw new Error('lastParams not set before calling loadMoreQueries');\n        }\n        this.performQuery(Object.assign(Object.assign({}, this.lastParams), { payload: Object.assign(Object.assign({}, this.lastParams.payload), { cursor: this.queries[this.queries.length - 1]._rowId }) }));\n    }\n    getDatasetsHistoryQuery(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const query = this.queries.find((q) => q.id === id);\n            if (query) {\n                return Promise.resolve(query);\n            }\n            return _shared_dash__WEBPACK_IMPORTED_MODULE_4__.dashApi.getDatasetsHistoryQuery(id);\n        });\n    }\n    performQuery(params) {\n        this.lastParams = params;\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.operate(this.getQueryHistoryOps.operation, _shared_dash__WEBPACK_IMPORTED_MODULE_4__.dashApi.queryDataset({\n            id: params.id,\n            'streaming-duration': params.streaming_duration,\n            nocache: params.nocache,\n            saveAsKind: params.saveAsKind,\n        }, params.payload), (result) => {\n            (0,_LogStreamStore__WEBPACK_IMPORTED_MODULE_5__.parseQueryMessages)(result);\n            if (this.lastParams === params) {\n                let { matches = [] } = result;\n                // Protect against old TitleCase vfields\n                matches = matches.filter((m) => { var _a; return ((_a = m.data) === null || _a === void 0 ? void 0 : _a.ID) === undefined; });\n                const { cursor, limit } = params.payload;\n                // If we specified a cursor then we're appending\n                if (cursor) {\n                    this.queries.push(...matches.map(mapEntryToHistoryInfo));\n                }\n                else {\n                    this.queries = matches ? matches.map(mapEntryToHistoryInfo) : [];\n                }\n                this.hasMore = matches.length === limit;\n            }\n        }, undefined);\n    }\n}\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_0__.observable\n], QueryHistoryStore.prototype, \"hasMore\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_0__.observable\n], QueryHistoryStore.prototype, \"queries\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_0__.observable\n], QueryHistoryStore.prototype, \"lastQuery\", void 0);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_0__.action.bound\n], QueryHistoryStore.prototype, \"pushLocalQuery\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_0__.action.bound\n], QueryHistoryStore.prototype, \"getQueries\", null);\n__decorate([\n    mobx__WEBPACK_IMPORTED_MODULE_0__.action.bound\n], QueryHistoryStore.prototype, \"loadMoreQueries\", null);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///86051\n");

/***/ })

}]);